{"version":3,"sources":["components/profile/Player.js","components/profile/Level.js","components/profile/Budget.js","components/profile/Stats.js","components/profile/index.js","assets/img/proficiencies/index.js","assets/img/proficiencies/art.png","assets/img/proficiencies/astronomy.png","assets/img/proficiencies/cad.png","assets/img/proficiencies/cooking.png","assets/img/proficiencies/crafting.png","assets/img/proficiencies/reading.png","assets/img/proficiencies/study.png","assets/img/proficiencies/working_out.png","components/proficiency/index.js","assets/img/weight-lifting-up.png","assets/img/speedometer.png","assets/img/artificial-intelligence.png","components/tasks/Task.js","components/tasks/Column.js","components/tasks/index.js","utils/markov.js","assets/img/two-coins.png","assets/img/treasure-map.png","assets/img/evil-minion.png","containers/AddTask.js","components/footer/index.js","components/navbar/index.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Player","props","className","profile","name","src","avatar","alt","Level","xp","level","Progress","percent","Math","round","levelPure","progress","color","Budget","budget","Stats","Object","keys","stats","map","stat","images","Image","size","replace","floor","Profile","Grid","container","Row","centered","columns","Column","computer","mobile","proficiencies","art","astronomy","cad","cooking","crafting","reading","study","working_out","Proficiency","rewards","strength","speed","intelligence","Task","data","status","textAlign","verticalAlign","x","inline","style","width","category","Icon","onClick","changeStatusTask","id","completeTask","deleteTask","taskList","prioritiesNames","1","2","3","Tasks","tasks","filter","y","priorities","Set","priority","sort","a","b","seps","sample","arr","random","length","MarkovChain","order","text","t","this","beginnings","freq","addText","toLowerCase","string","words","split","s","buf","push","slice","word","key","hasOwnProperty","splice","maxWords","sentence","done","nextWord","nextWordFor","join","sentences","String","e","addSentence","values","v","find","k","AddTask","useState","inputTaskName","setInputTaskName","inputPriority","setInputPriority","inputSkill","setInputSkill","inputProficiency","setInputProficiency","toggleInputSkill","skill","newSkills","indexOf","element","useEffect","open","taskName","Markov","quests","generateSentence","cleanStates","preventDragHandler","preventDefault","Modal","dimmer","onClose","toggleTaskModal","Header","Content","Form","Field","control","placeholder","value","onChange","event","target","onFocus","select","sideQuest","opacity","onDragStart","quest","bossFight","image","toggleInputProficiency","Actions","Button","negative","positive","addTask","Footer","primary","Navbar","Segment","inverted","Menu","pointing","secondary","to","Item","active","activeItem","getFromLocalStorage","defaultValue","storage","JSON","parse","localStorage","getItem","saveToLocalStorage","setItem","stringify","modalReducer","state","action","type","Error","App","setProfile","setTasks","React","useReducer","undefined","modalState","setModalState","saveTasks","newTasks","basename","path","uuidv4","startedAt","Date","now","completedAt","index","findIndex","obj","newProfile","prof","saveProfile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.066219e9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Player = (props) => {\n  return (\n    <div className=\"centerText\">\n      <span>{props.profile.name || \"Player Name\"}</span>\n      <br />\n      <img\n        src={\n          props.profile.avatar ||\n          \"https://cdn1.iconfinder.com/data/icons/zeshio-s-fantasy-avatars/200/Fantasy_avatar_people-07-512.png\"\n        }\n        className=\"playerPicture\"\n        alt=\"Player avatar\"\n      />\n    </div>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport { Progress } from \"semantic-ui-react\";\n\nconst Level = (props) => {\n  return (\n    <div className=\"centerText profileComponent\">\n      <div className=\"text-center\">XP: {props.profile.xp}</div>\n      <div className=\"text-center\">Level: {props.profile.level}</div>\n      <Progress\n        percent={Math.round((props.profile.levelPure % 1) * 100)}\n        progress\n        color=\"brown\"\n      />\n    </div>\n  );\n};\n\nexport default Level;\n","import React from \"react\";\n\nconst Budget = (props) => {\n  return (\n    <div className=\"centerText profileComponent\">\n      Budget: ${props.profile.budget || 0}\n    </div>\n  );\n};\n\nexport default Budget;\n","import React from \"react\";\nimport { Progress, Image } from \"semantic-ui-react\";\n\nconst Stats = (props) => {\n  return (\n    <div className=\"centerText profileComponent\">\n      {props.name}\n      {Object.keys(props.stats).map((stat) => (\n        <>\n          <div className=\"text-center categoryName\">\n            {props.images && (\n              <Image\n                key={stat}\n                src={props.images[stat]}\n                size=\"tiny\"\n                className=\"taskSkillImage\"\n              />\n            )}\n            {stat.replace(/_/gi, \" \")} - Level:{\" \"}\n            {Math.floor(props.stats[stat] / 5)}\n          </div>\n          <Progress\n            percent={(props.stats[stat] % 5) * 20}\n            progress\n            color=\"brown\"\n          />\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from \"react\";\nimport Player from \"./Player\";\nimport Level from \"./Level\";\nimport Budget from \"./Budget\";\nimport Stats from \"./Stats\";\nimport { Grid } from \"semantic-ui-react\";\n\nconst Profile = (props) => {\n  return (\n    <section>\n      <Grid container={true} className=\"profile\">\n        <Grid.Row centered columns={3} container={false}>\n          <Grid.Column computer={5} mobile={16}>\n            <Player profile={props.profile} />\n          </Grid.Column>\n          <Grid.Column computer={5} mobile={16}>\n            <Level profile={props.profile} />\n            <Budget profile={props.profile} />\n          </Grid.Column>\n          <Grid.Column computer={5} mobile={16}>\n            <Stats name=\"Stats\" stats={props.profile.stats} />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </section>\n  );\n};\n\nexport default Profile;\n","import art from \"./art.png\";\nimport astronomy from \"./astronomy.png\";\nimport cad from \"./cad.png\";\nimport cooking from \"./cooking.png\";\nimport crafting from \"./crafting.png\";\nimport reading from \"./reading.png\";\nimport study from \"./study.png\";\nimport working_out from \"./working_out.png\";\n\nconst proficiencies = {\n  art,\n  astronomy,\n  cad,\n  cooking,\n  crafting,\n  reading,\n  study,\n  working_out,\n};\n\nexport default proficiencies;\n","export default __webpack_public_path__ + \"static/media/art.e031e195.png\";","export default __webpack_public_path__ + \"static/media/astronomy.9de823b6.png\";","export default __webpack_public_path__ + \"static/media/cad.25f45ea4.png\";","export default __webpack_public_path__ + \"static/media/cooking.a9d4d0f5.png\";","export default __webpack_public_path__ + \"static/media/crafting.c79b1266.png\";","export default __webpack_public_path__ + \"static/media/reading.0ccffc52.png\";","export default __webpack_public_path__ + \"static/media/study.7a781a29.png\";","export default __webpack_public_path__ + \"static/media/working_out.e37e6624.png\";","import React from \"react\";\nimport Stats from \"../profile/Stats\";\nimport { Grid } from \"semantic-ui-react\";\nimport proficiencies from \"../../assets/img/proficiencies/\";\n\nconst Proficiency = (props) => {\n  return (\n    <section>\n      <Grid container={true} className=\"profile\">\n        <Grid.Row centered columns={1} container={false}>\n          {props.profile.proficiencies && (\n            <Grid.Column computer={16} mobile={16}>\n              <Stats\n                name=\"Proficiencies\"\n                stats={props.profile.proficiencies}\n                images={proficiencies}\n              />\n            </Grid.Column>\n          )}\n        </Grid.Row>\n      </Grid>\n    </section>\n  );\n};\n\nexport default Proficiency;\n","export default __webpack_public_path__ + \"static/media/weight-lifting-up.9247417f.png\";","export default __webpack_public_path__ + \"static/media/speedometer.34169805.png\";","export default __webpack_public_path__ + \"static/media/artificial-intelligence.470883d7.png\";","import React from \"react\";\nimport { Icon, Image, Grid } from \"semantic-ui-react\";\n\nimport strength from \"../../assets/img/weight-lifting-up.png\";\nimport speed from \"../../assets/img/speedometer.png\";\nimport intelligence from \"../../assets/img/artificial-intelligence.png\";\nimport proficiencies from \"../../assets/img/proficiencies/\";\n\nconst rewards = {\n  strength: strength,\n  speed: speed,\n  intelligence: intelligence,\n};\n\nconst Task = (props) => {\n  return (\n    <div className={\"centerText taskComponent task\" + props.data.status}>\n      <Grid centered container={false}>\n        <Grid.Row\n          centered\n          columns={3}\n          container={false}\n          textAlign=\"center\"\n          verticalAlign=\"middle\"\n        >\n          <Grid.Column\n            centered\n            computer={3}\n            mobile={3}\n            className=\"gridColumnTask\"\n          >\n            {props.data.rewards &&\n              props.data.rewards.map((x) => (\n                <Image\n                  verticalAlign=\"middle\"\n                  src={rewards[x]}\n                  size=\"mini\"\n                  className=\"invert\"\n                  inline\n                  style={{ width: \"2em\" }}\n                />\n              ))}\n            {props.data.proficiencies &&\n              props.data.proficiencies.map((x) => (\n                <Image\n                  verticalAlign=\"middle\"\n                  src={proficiencies[x]}\n                  size=\"mini\"\n                  inline\n                  style={{ width: \"2em\" }}\n                />\n              ))}\n          </Grid.Column>\n          <Grid.Column computer={7} mobile={7} className=\"gridColumnTask\">\n            {props.category && (\n              <span className=\"categoryName\">{props.category}</span>\n            )}\n            {props.data.name}\n          </Grid.Column>\n          <Grid.Column width={5} className=\"gridColumnTask\">\n            <Grid centered container>\n              <Grid.Row centered columns={3}>\n                {props.data.status !== \"completed\" && (\n                  <Grid.Column>\n                    {props.data.status !== \"idle\" && (\n                      <Icon\n                        name=\"pause\"\n                        onClick={() => {\n                          props.changeStatusTask(props.data.id, \"idle\");\n                        }}\n                      />\n                    )}\n                    {props.data.status === \"idle\" && (\n                      <Icon\n                        name=\"play\"\n                        onClick={() => {\n                          props.changeStatusTask(props.data.id, \"inprogress\");\n                        }}\n                      />\n                    )}\n                  </Grid.Column>\n                )}\n                {props.data.status !== \"completed\" && (\n                  <Grid.Column>\n                    <Icon\n                      name=\"check\"\n                      onClick={() => {\n                        props.completeTask(props.data.id);\n                      }}\n                    />\n                  </Grid.Column>\n                )}\n                <Grid.Column>\n                  <Icon\n                    name=\"trash\"\n                    onClick={() => {\n                      props.deleteTask(props.data.id);\n                    }}\n                  />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"./Task\";\n\nconst Column = (props) => (\n  <div className=\"taskColumn\">\n    <div className=\"categoryName\">{props.name}</div>\n    {props.taskList.map((x) => (\n      <Task\n        key={x.id}\n        data={x}\n        deleteTask={props.deleteTask}\n        completeTask={props.completeTask}\n        changeStatusTask={props.changeStatusTask}\n      />\n    ))}\n  </div>\n);\n\nexport default Column;\n","import React from \"react\";\nimport Column from \"./Column\";\nimport { Grid } from \"semantic-ui-react\";\n\nconst prioritiesNames = {\n  1: \"Side quest\",\n  2: \"Quest\",\n  3: \"Boss fight\",\n};\n\nconst Tasks = (props) => {\n  const tasks = props.taskList.filter((y) => y.status !== \"completed\");\n  const priorities = [...new Set(tasks.map((x) => x.priority))];\n  priorities.sort((a, b) => b - a);\n  return (\n    <section>\n      <div className=\"tasks\">\n        <Grid>\n          <Grid.Row\n            centered\n            columns={3}\n            container={false}\n            textAlign=\"center\"\n            verticalAlign=\"top\"\n          >\n            {priorities.map((x) => (\n              <Grid.Column computer={5} mobile={16}>\n                <Column\n                  key={x}\n                  name={prioritiesNames[x]}\n                  taskList={tasks.filter((y) => y.priority === x)}\n                  deleteTask={props.deleteTask}\n                  completeTask={props.completeTask}\n                  changeStatusTask={props.changeStatusTask}\n                />\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n        </Grid>\n      </div>\n    </section>\n  );\n};\n\nexport default Tasks;\n","// define some sentence separators\nconst seps = /[.!?;:]/;\n\n/**\n * sample is a function that picks a random element from an array\n * @param {any[]} arr\n */\nfunction sample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nclass MarkovChain {\n  /**\n   * @param {number} order\n   */\n  constructor(order, text) {\n    /**\n     * \"order\" is the \"memory\" of the Markov chain. For example, with\n     * an order of 2, the likelihood of a word appearing is based on the\n     * previous 2 words\n     * @type {number}\n     */\n    this.order = order;\n\n    /**\n     * The array storing all the beginnings of sentences in our text sample.\n     * One of these will be chosen at random to start the generated sentence.\n     * @type {string[][]}\n     */\n    this.beginnings = [];\n\n    /**\n     * A dictionary of frequencies for different word combinations. Each key\n     * is a sentence fragment of `order` length, and the value is an array of\n     * words that come after that sentence fragment.\n     */\n    this.freq = {};\n\n    for (let t in text) {\n      this.addText(text[t].toLowerCase());\n    }\n  }\n\n  /**\n   * Adds a sentence to the chain. This adds the beginning of the sentence to\n   * this.beginnings and adds frequencies/probabilities to this.freq\n   * @param {string} string\n   */\n  addSentence(string) {\n    // split the passed sentence into words and filter out excess spaces/empty slots\n    const words = string\n      .split(\" \")\n      .filter((s) => s !== \"'\")\n      .filter((s) => s !== \" \")\n      .filter((s) => s !== \"\");\n\n    /**\n     * Initialise a buffer. This buffer will be moved along the sentence kind\n     * of like a filmstrip, looking at only `order + 1` words at a time:\n     *\n     * This is [a sentence with] the buffer illustrated\n     *\n     */\n    const buf = [];\n\n    // If the sentence is shorter than the order then we must return\n    if (words.length <= this.order) {\n      return;\n    }\n\n    // Add the beginning of this sentence to the chain's beginnings\n    this.beginnings.push(words.slice(0, this.order + 1));\n\n    for (let word of words) {\n      buf.push(word);\n      if (buf.length === this.order + 1) {\n        const key = `${buf[0]} ${buf[buf.length - 2]}`;\n        if (this.freq.hasOwnProperty(key)) {\n          this.freq[key].push(buf[buf.length - 1]);\n        } else {\n          this.freq[key] = [buf[buf.length - 1]];\n        }\n\n        /**\n         * Remove the first word from the beginning of the array to move\n         * the buffer forward\n         */\n        buf.splice(0, 1);\n      }\n    }\n  }\n\n  /**\n   * Runs through the Markov chain to generate a sentence\n   */\n  generateSentence(maxWords = 100) {\n    // Sample the beginnings and make a copy to begin our sentence.\n    const sentence = sample(this.beginnings).slice();\n\n    // Choose a random fragment of puncutation to end the sentence with.\n\n    // Set a flag for us to check when we've exhausted our sentence options.\n    let done = false;\n\n    while (!done) {\n      // Pick the two most recent words\n      const words = [\n        sentence[sentence.length - 2],\n        sentence[sentence.length - 1],\n      ];\n\n      // Grab the next word following the previous two\n      const nextWord = this.nextWordFor(words);\n\n      if (!nextWord.done) {\n        // If the sentence isn't finished, push the result to the end of the sentence\n        sentence.push(nextWord.word);\n      } else {\n        // Otherwise, we're finished!\n        done = true;\n      }\n      if (sentence.length >= maxWords) {\n        done = true;\n      }\n    }\n\n    // Return the completed sentence.\n    return sentence.join(\" \");\n  }\n\n  /**\n   * nextWordFor takes two words and returns the next word (chosen at random, with\n   * more-commonly appearing words being more likely to be chosen)\n   *\n   * @param {string[]} words\n   */\n  nextWordFor(words) {\n    const [a, b] = words;\n    const key = `${a} ${b}`;\n    if (this.freq.hasOwnProperty(key)) {\n      return {\n        word: sample(this.freq[key]),\n        done: false,\n      };\n    } else {\n      return {\n        done: true,\n      };\n    }\n  }\n\n  addText(text) {\n    const sentences = String(text)\n      // strip newlines\n      .replace(/\\n/g, \" \")\n      .replace(/<[^>]*>?/gm, \"\")\n      .replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, \"\")\n      // split into sentences\n      .split(seps)\n      // filter out empty strings\n      .filter((e) => e !== \"\");\n    for (let sentence of sentences) {\n      this.addSentence(sentence);\n    }\n  }\n\n  sampleFrequencies() {\n    const key = sample(Object.keys(this.freq));\n\n    return `${key}: ${this.freq[key]}`;\n  }\n\n  getLongestChain() {\n    const values = Object.values(this.freq).sort((a, b) => b.length - a.length);\n    const key = Object.keys(this.freq).find((k) => this.freq[k] === values[0]);\n    let v = {};\n\n    v[key] = values[0];\n\n    return v;\n  }\n\n  getFrequencies() {\n    return this.freq;\n  }\n\n  getBeginnings() {\n    return this.beginnings;\n  }\n}\n\nexport default MarkovChain;\n","export default __webpack_public_path__ + \"static/media/two-coins.7996ead5.png\";","export default __webpack_public_path__ + \"static/media/treasure-map.f8e3cf39.png\";","export default __webpack_public_path__ + \"static/media/evil-minion.b7e8bae2.png\";","import React, { useState, useEffect } from \"react\";\n\nimport { Button, Modal, Form, Image, Grid } from \"semantic-ui-react\";\n\nimport Markov from \"../utils/markov\";\nimport quests from \"../assets/config/quests.json\";\nimport sideQuest from \"../assets/img/two-coins.png\";\nimport quest from \"../assets/img/treasure-map.png\";\nimport bossFight from \"../assets/img/evil-minion.png\";\nimport strength from \"../assets/img/weight-lifting-up.png\";\nimport speed from \"../assets/img/speedometer.png\";\nimport intelligence from \"../assets/img/artificial-intelligence.png\";\nimport proficiencies from \"../assets/img/proficiencies/\";\n\nconst AddTask = (props) => {\n  const [inputTaskName, setInputTaskName] = useState(\"\");\n  const [inputPriority, setInputPriority] = useState(1);\n  const [inputSkill, setInputSkill] = useState([]);\n  const [inputProficiency, setInputProficiency] = useState([]);\n\n  const cleanStates = () => {\n    const taskName = new Markov(2, quests).generateSentence(7);\n    setInputTaskName(taskName);\n    setInputPriority(1);\n    setInputSkill([]);\n    setInputProficiency([]);\n  };\n\n  const toggleInputSkill = (skill) => {\n    let newSkills = [];\n    if (inputSkill.indexOf(skill) !== -1) {\n      newSkills = inputSkill.filter((element) => element !== skill);\n    } else {\n      newSkills = [...inputSkill, skill];\n    }\n    setInputSkill(newSkills);\n  };\n  const toggleInputProficiency = (skill) => {\n    let newSkills = [];\n    if (inputProficiency.indexOf(skill) !== -1) {\n      newSkills = inputProficiency.filter((element) => element !== skill);\n    } else {\n      newSkills = [...inputProficiency, skill];\n    }\n    setInputProficiency(newSkills);\n  };\n\n  useEffect(() => {\n    if (props.open) {\n      cleanStates();\n    }\n  }, [props.open]);\n\n  const preventDragHandler = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Modal\n      dimmer={props.dimmer}\n      open={props.open}\n      onClose={() => {\n        props.toggleTaskModal();\n      }}\n    >\n      <Modal.Header className=\"centerText\">Add quest</Modal.Header>\n      <Modal.Content>\n        <Form>\n          <Grid centered columns={1} container>\n            <Grid.Row centered columns={3}>\n              <Form.Field\n                control=\"input\"\n                placeholder=\"Quest name\"\n                value={inputTaskName}\n                onChange={(event) => setInputTaskName(event.target.value)}\n                onFocus={(event) => event.target.select()}\n              />\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest Type\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              <Grid.Column>\n                <Image\n                  src={sideQuest}\n                  size=\"tiny\"\n                  onClick={() => setInputPriority(1)}\n                  className=\"taskSkillImage invert\"\n                  style={{ opacity: inputPriority === 1 ? 1 : 0.5 }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={quest}\n                  size=\"tiny\"\n                  onClick={() => setInputPriority(2)}\n                  className=\"taskSkillImage invert\"\n                  style={{ opacity: inputPriority === 2 ? 1 : 0.5 }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={bossFight}\n                  size=\"tiny\"\n                  onClick={() => setInputPriority(3)}\n                  className=\"taskSkillImage invert\"\n                  style={{ opacity: inputPriority === 3 ? 1 : 0.5 }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest rewards\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              <Grid.Column>\n                <Image\n                  src={strength}\n                  size=\"tiny\"\n                  onClick={() => toggleInputSkill(\"strength\")}\n                  className=\"taskSkillImage invert\"\n                  style={{\n                    opacity: inputSkill.indexOf(\"strength\") !== -1 ? 1 : 0.5,\n                  }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={speed}\n                  size=\"tiny\"\n                  onClick={() => toggleInputSkill(\"speed\")}\n                  className=\"taskSkillImage invert\"\n                  style={{\n                    opacity: inputSkill.indexOf(\"speed\") !== -1 ? 1 : 0.5,\n                  }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={intelligence}\n                  size=\"tiny\"\n                  onClick={() => toggleInputSkill(\"intelligence\")}\n                  className=\"taskSkillImage invert\"\n                  style={{\n                    opacity:\n                      inputSkill.indexOf(\"intelligence\") !== -1 ? 1 : 0.5,\n                  }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest proficiencies\n            </Grid.Row>\n            <Grid.Row centered columns={4}>\n              {proficiencies &&\n                Object.keys(proficiencies).map((image) => {\n                  return (\n                    <Grid.Column centered key={image}>\n                      <Image\n                        key={image}\n                        src={proficiencies[image]}\n                        size=\"tiny\"\n                        onClick={() => toggleInputProficiency(image)}\n                        className=\"taskSkillImage taskSkillProficiency\"\n                        style={{\n                          opacity:\n                            inputProficiency.indexOf(image) !== -1 ? 1 : 0.5,\n                        }}\n                        onDragStart={preventDragHandler}\n                      />\n                    </Grid.Column>\n                  );\n                })}\n            </Grid.Row>\n          </Grid>\n        </Form>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          negative\n          onClick={() => {\n            props.toggleTaskModal();\n          }}\n        >\n          Close\n        </Button>\n        <Button\n          positive\n          onClick={() =>\n            props.addTask(\n              inputTaskName,\n              inputPriority,\n              inputSkill,\n              inputProficiency\n            )\n          }\n        >\n          Add quest\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default AddTask;\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nconst Footer = (props) => (\n  <Button primary onClick={props.toggleTaskModal}>\n    Add quest\n  </Button>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport { Menu, Segment } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = (props) => (\n  <Segment inverted>\n    <Menu inverted pointing secondary>\n      <Link to=\"/\">\n        <Menu.Item name=\"profile\" active={props.activeItem === \"profile\"} />\n      </Link>\n      <Link to=\"/quests\">\n        <Menu.Item name=\"quests\" active={props.activeItem === \"quests\"} />\n      </Link>\n      <Link to=\"/proficiency\">\n        <Menu.Item\n          name=\"proficiency\"\n          active={props.activeItem === \"proficiency\"}\n        />\n      </Link>\n      <Link to=\"/budget\">\n        <Menu.Item name=\"budget\" active={props.activeItem === \"budget\"} />\n      </Link>\n    </Menu>\n  </Segment>\n);\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport Profile from \"../components/profile\";\nimport Proficiency from \"../components/proficiency\";\nimport Tasks from \"../components/tasks\";\nimport AddTask from \"./AddTask\";\nimport Footer from \"../components/footer\";\nimport Navbar from \"../components/navbar\";\n\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nconst getFromLocalStorage = (key, defaultValue) => {\n  let storage = JSON.parse(localStorage.getItem(key));\n  if (!storage) {\n    storage = defaultValue;\n  }\n  return storage;\n};\n\nconst saveToLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nfunction modalReducer(state, action) {\n  switch (action.type) {\n    case \"OPEN_MODAL\":\n      return { open: true, dimmer: action.dimmer };\n    case \"CLOSE_MODAL\":\n      return { open: false };\n    default:\n      throw new Error();\n  }\n}\n\nconst getTasks = () => getFromLocalStorage(\"tasks\", []);\nconst getProfile = () =>\n  getFromLocalStorage(\"profile\", {\n    name: \"Niekto\",\n    avatar: null,\n    level: 1,\n    levelPure: 1,\n    xp: 0,\n    budget: 0,\n    stats: {\n      strength: 0,\n      speed: 0,\n      intelligence: 0,\n    },\n    proficiencies: {},\n  });\n\nconst App = () => {\n  const [profile, setProfile] = useState(getProfile());\n  const [tasks, setTasks] = useState(getTasks());\n  const [modalState, setModalState] = React.useReducer(modalReducer, {\n    open: false,\n    dimmer: undefined,\n  });\n\n  const saveTasks = (newTasks) => {\n    saveToLocalStorage(\"tasks\", newTasks);\n    setTasks(newTasks);\n  };\n\n  const saveProfile = (newProfile) => {\n    saveToLocalStorage(\"profile\", newProfile);\n    setProfile(newProfile);\n  };\n\n  const addTask = (\n    inputTaskName,\n    inputPriority,\n    inputSkill,\n    inputProficiency\n  ) => {\n    const newTasks = [...tasks];\n    const id = uuidv4();\n    newTasks.push({\n      id,\n      name: inputTaskName,\n      category: \"global\",\n      status: \"idle\",\n      startedAt: Date.now(),\n      completedAt: null,\n      priority: inputPriority,\n      rewards: inputSkill,\n      proficiencies: inputProficiency,\n    });\n    saveTasks(newTasks);\n    toggleTaskModal();\n  };\n\n  const toggleTaskModal = () => {\n    setModalState({\n      type: modalState.open ? \"CLOSE_MODAL\" : \"OPEN_MODAL\",\n      dimmer: \"blurring\",\n    });\n  };\n\n  const deleteTask = (id) => {\n    const newTasks = tasks.filter((element) => element.id !== id);\n    saveTasks(newTasks);\n  };\n\n  const completeTask = (id) => {\n    const newTasks = [...tasks];\n    const index = newTasks.findIndex((obj) => obj.id === id);\n    newTasks[index].completedAt = Date.now();\n    newTasks[index].status = \"completed\";\n    saveTasks(newTasks);\n\n    const newProfile = { ...profile };\n    newProfile.xp += Math.floor(Math.random() * 10) * newTasks[index].priority;\n    newProfile.levelPure += newProfile.xp / (120 * newProfile.level);\n    newProfile.level = Math.floor(newProfile.levelPure);\n    for (let skill in newTasks[index].rewards) {\n      newProfile.stats[newTasks[index].rewards[skill]]++;\n    }\n    if (!(\"proficiencies\" in newProfile)) {\n      newProfile.proficiencies = {};\n    }\n    for (let prof in newTasks[index].proficiencies) {\n      if (!(newTasks[index].proficiencies[prof] in newProfile.proficiencies)) {\n        newProfile.proficiencies[newTasks[index].proficiencies[prof]] = 0;\n      }\n      newProfile.proficiencies[newTasks[index].proficiencies[prof]]++;\n    }\n    saveProfile(newProfile);\n  };\n\n  const changeStatusTask = (id, status) => {\n    const newTasks = [...tasks];\n    const index = newTasks.findIndex((obj) => obj.id === id);\n    newTasks[index].status = status;\n    saveTasks(newTasks);\n  };\n\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <header>\n          <Navbar />\n        </header>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/quests\">\n              <AddTask\n                open={modalState.open}\n                dimmer={modalState.dimmer}\n                toggleTaskModal={toggleTaskModal}\n                addTask={addTask}\n              />\n              <Tasks\n                taskList={tasks}\n                deleteTask={deleteTask}\n                completeTask={completeTask}\n                changeStatusTask={changeStatusTask}\n              />\n              <div className=\"bottomNavbar\">\n                <Footer toggleTaskModal={toggleTaskModal} />\n              </div>\n            </Route>\n            <Route path=\"/proficiency\">\n              <Proficiency profile={profile} />\n            </Route>\n            <Route path=\"/\">\n              <Profile profile={profile} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./assets/styles/index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}