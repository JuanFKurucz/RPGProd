{"version":3,"sources":["components/profile/Player.tsx","components/profile/Level.tsx","components/profile/Budget.tsx","components/profile/Stat.tsx","components/profile/Stats.tsx","components/profile/index.tsx","assets/img/proficiencies/index.tsx","assets/img/proficiencies/art.png","assets/img/proficiencies/astronomy.png","assets/img/proficiencies/cad.png","assets/img/proficiencies/cooking.png","assets/img/proficiencies/crafting.png","assets/img/proficiencies/reading.png","assets/img/proficiencies/study.png","assets/img/proficiencies/working_out.png","components/proficiency/index.tsx","assets/img/skills/index.tsx","assets/img/skills/intelligence.png","assets/img/skills/speed.png","assets/img/skills/strength.png","components/tasks/Task.tsx","components/tasks/Column.tsx","components/tasks/index.tsx","assets/img/quests/index.tsx","assets/img/quests/boss_fight.png","assets/img/quests/quest.png","assets/img/quests/side_quest.png","utils/markov.js","containers/AddTask.tsx","components/footer/index.tsx","components/navbar/index.tsx","containers/App.tsx","index.tsx"],"names":["Player","profile","className","name","src","avatar","alt","Level","xp","level","Progress","percent","Math","round","levelPure","progress","color","Budget","budget","Stat","number","image","Image","size","replace","floor","Stats","stats","images","Object","keys","map","stat","Profile","Grid","container","Row","centered","columns","Column","computer","mobile","proficiencies","art","astronomy","cad","cooking","crafting","reading","study","working_out","Proficiency","skills","intelligence","speed","strength","Task","data","category","deleteTask","completeTask","changeStatusTask","status","textAlign","verticalAlign","rewards","x","inline","style","width","Icon","onClick","id","taskList","prioritiesNames","1","2","3","Tasks","tasks","filter","y","priorities","Set","priority","sort","a","b","margin","padding","quests","bossFight","quest","sideQuest","seps","sample","arr","random","length","MarkovChain","order","text","t","this","beginnings","freq","addText","toLowerCase","string","words","split","s","buf","push","slice","word","key","hasOwnProperty","splice","maxWords","sentence","done","nextWord","nextWordFor","join","sentences","String","e","addSentence","values","v","find","k","AddTask","open","dimmer","toggleTaskModal","addTask","useState","inputTaskName","setInputTaskName","inputPriority","setInputPriority","inputSkill","setInputSkill","inputProficiency","setInputProficiency","useEffect","taskName","Markov","questConfig","generateSentence","cleanStates","preventDragHandler","preventDefault","Modal","onClose","basic","marginTop","marginBottom","Content","Form","Field","control","placeholder","value","onChange","event","target","onFocus","select","indexOf","opacity","onDragStart","skill","newSkills","element","toggleInputSkill","toggleInputProficiency","Actions","marginLeft","marginRight","Button","negative","float","positive","Footer","Navbar","activeItem","Segment","inverted","Menu","pointing","secondary","to","Item","active","getFromLocalStorage","defaultValue","localStorageValue","localStorage","getItem","JSON","parse","saveToLocalStorage","setItem","stringify","modalReducer","_state","action","type","Error","App","setProfile","setTasks","React","useReducer","undefined","modalState","setModalState","saveTasks","newTasks","basename","path","uuidv4","startedAt","Date","now","completedAt","currentTaskIndex","findIndex","obj","newProfile","forEach","saveProfile","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a62cf3e.chunk.js","sourcesContent":["import React from 'react';\n\nimport { ProfileType } from '../../utils/types';\n\ntype PlayerProps = { profile: ProfileType };\n\nconst Player = ({ profile }: PlayerProps): React.ReactElement => (\n  <div className=\"centerText\">\n    <span>{profile.name || 'Player Name'}</span>\n    <br />\n    <img\n      src={\n        profile.avatar ||\n        'https://cdn1.iconfinder.com/data/icons/zeshio-s-fantasy-avatars/200/Fantasy_avatar_people-07-512.png'\n      }\n      className=\"playerPicture\"\n      alt=\"Player avatar\"\n    />\n  </div>\n);\n\nexport default Player;\n","import React from 'react';\n\nimport { Progress } from 'semantic-ui-react';\n\nimport { ProfileType } from '../../utils/types';\n\ntype LevelProps = { profile: ProfileType };\n\nconst Level = ({ profile }: LevelProps): React.ReactElement => (\n  <div className=\"centerText profileComponent\">\n    <div className=\"text-center\">\n      XP:\n      {profile.xp}\n    </div>\n    <div className=\"text-center\">\n      Level:\n      {profile.level}\n    </div>\n    <Progress percent={Math.round((profile.levelPure % 1) * 100)} progress color=\"brown\" />\n  </div>\n);\n\nexport default Level;\n","import React from 'react';\n\nimport { ProfileType } from '../../utils/types';\n\ntype BudgetProps = { profile: ProfileType };\n\nconst Budget = ({ profile }: BudgetProps): React.ReactElement => (\n  <div className=\"centerText profileComponent\">Budget: ${profile.budget || 0}</div>\n);\n\nexport default Budget;\n","import React from 'react';\n\nimport { Progress, Image } from 'semantic-ui-react';\n\ntype StatProps = {\n  name: string;\n  number: number;\n  image?: string;\n};\n\nconst Stat = ({ name, number, image = '' }: StatProps): React.ReactElement => (\n  <>\n    <div className=\"text-center categoryName\">\n      {image && <Image src={image} size=\"tiny\" className=\"taskSkillImage\" />}\n      {name.replace(/_/gi, ' ')} - Level: {Math.floor(number / 5)}\n    </div>\n    <Progress percent={(number % 5) * 20} progress color=\"brown\" />\n  </>\n);\n\nexport default Stat;\n","import React from 'react';\n\nimport Stat from './Stat';\n\ntype StatsProps = {\n  name: string;\n  stats: Record<string, number>;\n  images?: Record<string, string>;\n};\n\nconst Stats = ({ name, stats, images = {} }: StatsProps): React.ReactElement => (\n  <div className=\"centerText profileComponent\">\n    {name}\n    {Object.keys(stats).map((stat) => (\n      <Stat key={stat} name={stat} number={stats[stat]} image={images[stat]} />\n    ))}\n  </div>\n);\n\nexport default Stats;\n","import React from 'react';\n\nimport { Grid } from 'semantic-ui-react';\n\nimport Player from './Player';\nimport Level from './Level';\nimport Budget from './Budget';\nimport Stats from './Stats';\nimport { ProfileType } from '../../utils/types';\n\ntype ProfileProps = {\n  profile: ProfileType;\n};\n\nconst Profile = ({ profile }: ProfileProps): React.ReactElement => (\n  <section>\n    <Grid container className=\"profile\">\n      <Grid.Row centered columns={3}>\n        <Grid.Column computer={5} mobile={16}>\n          <Player profile={profile} />\n        </Grid.Column>\n        <Grid.Column computer={5} mobile={16}>\n          <Level profile={profile} />\n          <Budget profile={profile} />\n        </Grid.Column>\n        <Grid.Column computer={5} mobile={16}>\n          <Stats name=\"Stats\" stats={profile.stats} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  </section>\n);\n\nexport default Profile;\n","import art from './art.png';\nimport astronomy from './astronomy.png';\nimport cad from './cad.png';\nimport cooking from './cooking.png';\nimport crafting from './crafting.png';\nimport reading from './reading.png';\nimport study from './study.png';\nimport workingOut from './working_out.png';\n\nconst proficiencies: Record<string, string> = {\n  art,\n  astronomy,\n  cad,\n  cooking,\n  crafting,\n  reading,\n  study,\n  working_out: workingOut,\n};\n\nexport default proficiencies;\n","export default __webpack_public_path__ + \"static/media/art.e031e195.png\";","export default __webpack_public_path__ + \"static/media/astronomy.9de823b6.png\";","export default __webpack_public_path__ + \"static/media/cad.25f45ea4.png\";","export default __webpack_public_path__ + \"static/media/cooking.a9d4d0f5.png\";","export default __webpack_public_path__ + \"static/media/crafting.c79b1266.png\";","export default __webpack_public_path__ + \"static/media/reading.0ccffc52.png\";","export default __webpack_public_path__ + \"static/media/study.7a781a29.png\";","export default __webpack_public_path__ + \"static/media/working_out.e37e6624.png\";","import React from 'react';\n\nimport { Grid } from 'semantic-ui-react';\n\nimport proficiencies from '../../assets/img/proficiencies';\nimport Stats from '../profile/Stats';\n\ntype ProficiencyProps = { profile: { proficiencies: Record<string, number> } };\n\nconst Proficiency = ({ profile }: ProficiencyProps): React.ReactElement => (\n  <section>\n    <Grid container className=\"profile\">\n      <Grid.Row centered columns={1}>\n        {profile.proficiencies && (\n          <Grid.Column computer={16} mobile={16}>\n            <Stats name=\"Proficiencies\" stats={profile.proficiencies} images={proficiencies} />\n          </Grid.Column>\n        )}\n      </Grid.Row>\n    </Grid>\n  </section>\n);\n\nexport default Proficiency;\n","import intelligence from './intelligence.png';\nimport speed from './speed.png';\nimport strength from './strength.png';\n\nconst skills: Record<string, string> = {\n  intelligence,\n  speed,\n  strength,\n};\n\nexport default skills;\n","export default __webpack_public_path__ + \"static/media/intelligence.470883d7.png\";","export default __webpack_public_path__ + \"static/media/speed.34169805.png\";","export default __webpack_public_path__ + \"static/media/strength.9247417f.png\";","import React from 'react';\n\nimport { Icon, Image, Grid } from 'semantic-ui-react';\n\nimport skills from '../../assets/img/skills';\nimport proficiencies from '../../assets/img/proficiencies';\n\nimport {\n  TaskType,\n  DeleteTaskType,\n  CompleteTaskType,\n  ChangeStatusTaskType,\n} from '../../utils/types';\n\ntype TaskProps = {\n  data: TaskType;\n  category?: string;\n  deleteTask: DeleteTaskType;\n  completeTask: CompleteTaskType;\n  changeStatusTask: ChangeStatusTaskType;\n};\n\nconst Task = ({\n  data,\n  category = '',\n  deleteTask,\n  completeTask,\n  changeStatusTask,\n}: TaskProps): React.ReactElement => (\n  <div className={`centerText taskComponent task${data.status}`}>\n    <Grid centered>\n      <Grid.Row centered columns={3} textAlign=\"center\" verticalAlign=\"middle\">\n        <Grid.Column centered computer={3} mobile={3} className=\"gridColumnTask\">\n          {data.rewards &&\n            data.rewards.map((x) => (\n              <Image\n                key={x}\n                verticalAlign=\"middle\"\n                src={skills[x]}\n                size=\"mini\"\n                className=\"invert\"\n                inline\n                style={{ width: '2em' }}\n              />\n            ))}\n          {data.proficiencies &&\n            data.proficiencies.map((x) => (\n              <Image\n                key={x}\n                verticalAlign=\"middle\"\n                src={proficiencies[x]}\n                size=\"mini\"\n                inline\n                style={{ width: '2em' }}\n              />\n            ))}\n        </Grid.Column>\n        <Grid.Column computer={7} mobile={7} className=\"gridColumnTask\">\n          {category && <span className=\"categoryName\">{category}</span>}\n          {data.name}\n        </Grid.Column>\n        <Grid.Column width={5} className=\"gridColumnTask\">\n          <Grid centered container>\n            <Grid.Row centered columns={3}>\n              {data.status !== 'completed' && (\n                <Grid.Column>\n                  {data.status !== 'idle' && (\n                    <Icon\n                      name=\"pause\"\n                      onClick={() => {\n                        changeStatusTask(data.id, 'idle');\n                      }}\n                    />\n                  )}\n                  {data.status === 'idle' && (\n                    <Icon\n                      name=\"play\"\n                      onClick={() => {\n                        changeStatusTask(data.id, 'inprogress');\n                      }}\n                    />\n                  )}\n                </Grid.Column>\n              )}\n              {data.status !== 'completed' && (\n                <Grid.Column>\n                  <Icon\n                    name=\"check\"\n                    onClick={() => {\n                      completeTask(data.id);\n                    }}\n                  />\n                </Grid.Column>\n              )}\n              <Grid.Column>\n                <Icon\n                  name=\"trash\"\n                  onClick={() => {\n                    deleteTask(data.id);\n                  }}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  </div>\n);\n\nexport default Task;\n","import React from 'react';\n\nimport Task from './Task';\nimport {\n  TaskType,\n  DeleteTaskType,\n  CompleteTaskType,\n  ChangeStatusTaskType,\n} from '../../utils/types';\n\ntype ColumnProps = {\n  name: string;\n  taskList: Array<TaskType>;\n  deleteTask: DeleteTaskType;\n  completeTask: CompleteTaskType;\n  changeStatusTask: ChangeStatusTaskType;\n};\n\nconst Column = ({\n  name,\n  taskList,\n  deleteTask,\n  completeTask,\n  changeStatusTask,\n}: ColumnProps): React.ReactElement => (\n  <div className=\"taskColumn\">\n    <div className=\"categoryName\">{name}</div>\n    {taskList.map((x) => (\n      <Task\n        key={x.id}\n        data={x}\n        deleteTask={deleteTask}\n        completeTask={completeTask}\n        changeStatusTask={changeStatusTask}\n      />\n    ))}\n  </div>\n);\n\nexport default Column;\n","import React from 'react';\n\nimport { Grid } from 'semantic-ui-react';\n\nimport {\n  TaskType,\n  DeleteTaskType,\n  CompleteTaskType,\n  ChangeStatusTaskType,\n} from '../../utils/types';\nimport Column from './Column';\n\ntype TasksProps = {\n  taskList: Array<TaskType>;\n  deleteTask: DeleteTaskType;\n  completeTask: CompleteTaskType;\n  changeStatusTask: ChangeStatusTaskType;\n};\n\nconst prioritiesNames: Record<number, string> = {\n  1: 'Side quest',\n  2: 'Quest',\n  3: 'Boss fight',\n};\n\nconst Tasks = ({\n  taskList,\n  deleteTask,\n  completeTask,\n  changeStatusTask,\n}: TasksProps): React.ReactElement => {\n  const tasks = taskList.filter((y) => y.status !== 'completed');\n  const priorities: number[] = [...new Set(tasks.map((x) => x.priority))];\n  priorities.sort((a: number, b: number) => b - a);\n  return (\n    <section>\n      <div className=\"tasks\">\n        <Grid style={{ margin: 0, padding: 0 }}>\n          <Grid.Row centered columns={3} textAlign=\"center\" verticalAlign=\"top\">\n            {priorities.map((x) => (\n              <Grid.Column computer={5} mobile={16} style={{ margin: 0, padding: 0 }}>\n                <Column\n                  key={x}\n                  name={prioritiesNames[x]}\n                  taskList={tasks.filter((y) => y.priority === x)}\n                  deleteTask={deleteTask}\n                  completeTask={completeTask}\n                  changeStatusTask={changeStatusTask}\n                />\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n        </Grid>\n      </div>\n    </section>\n  );\n};\n\nexport default Tasks;\n","import bossFight from './boss_fight.png';\nimport quest from './quest.png';\nimport sideQuest from './side_quest.png';\n\nconst quests: Record<string, string> = {\n  bossFight,\n  quest,\n  sideQuest,\n};\n\nexport default quests;\n","export default __webpack_public_path__ + \"static/media/boss_fight.ce57ecfd.png\";","export default __webpack_public_path__ + \"static/media/quest.71180bbd.png\";","export default __webpack_public_path__ + \"static/media/side_quest.57f8ddd7.png\";","/* eslint-disable */\n\n// define some sentence separators\nconst seps = /[.!?;:]/;\n\n/**\n * sample is a function that picks a random element from an array\n * @param {any[]} arr\n */\nfunction sample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nclass MarkovChain {\n  /**\n   * @param {number} order\n   */\n  constructor(order, text) {\n    /**\n     * \"order\" is the \"memory\" of the Markov chain. For example, with\n     * an order of 2, the likelihood of a word appearing is based on the\n     * previous 2 words\n     * @type {number}\n     */\n    this.order = order;\n\n    /**\n     * The array storing all the beginnings of sentences in our text sample.\n     * One of these will be chosen at random to start the generated sentence.\n     * @type {string[][]}\n     */\n    this.beginnings = [];\n\n    /**\n     * A dictionary of frequencies for different word combinations. Each key\n     * is a sentence fragment of `order` length, and the value is an array of\n     * words that come after that sentence fragment.\n     */\n    this.freq = {};\n\n    for (let t in text) {\n      this.addText(text[t].toLowerCase());\n    }\n  }\n\n  /**\n   * Adds a sentence to the chain. This adds the beginning of the sentence to\n   * this.beginnings and adds frequencies/probabilities to this.freq\n   * @param {string} string\n   */\n  addSentence(string) {\n    // split the passed sentence into words and filter out excess spaces/empty slots\n    const words = string\n      .split(' ')\n      .filter((s) => s !== \"'\")\n      .filter((s) => s !== ' ')\n      .filter((s) => s !== '');\n\n    /**\n     * Initialise a buffer. This buffer will be moved along the sentence kind\n     * of like a filmstrip, looking at only `order + 1` words at a time:\n     *\n     * This is [a sentence with] the buffer illustrated\n     *\n     */\n    const buf = [];\n\n    // If the sentence is shorter than the order then we must return\n    if (words.length <= this.order) {\n      return;\n    }\n\n    // Add the beginning of this sentence to the chain's beginnings\n    this.beginnings.push(words.slice(0, this.order + 1));\n\n    for (let word of words) {\n      buf.push(word);\n      if (buf.length === this.order + 1) {\n        const key = `${buf[0]} ${buf[buf.length - 2]}`;\n        if (this.freq.hasOwnProperty(key)) {\n          this.freq[key].push(buf[buf.length - 1]);\n        } else {\n          this.freq[key] = [buf[buf.length - 1]];\n        }\n\n        /**\n         * Remove the first word from the beginning of the array to move\n         * the buffer forward\n         */\n        buf.splice(0, 1);\n      }\n    }\n  }\n\n  /**\n   * Runs through the Markov chain to generate a sentence\n   */\n  generateSentence(maxWords = 100) {\n    // Sample the beginnings and make a copy to begin our sentence.\n    const sentence = sample(this.beginnings).slice();\n\n    // Choose a random fragment of puncutation to end the sentence with.\n\n    // Set a flag for us to check when we've exhausted our sentence options.\n    let done = false;\n\n    while (!done) {\n      // Pick the two most recent words\n      const words = [sentence[sentence.length - 2], sentence[sentence.length - 1]];\n\n      // Grab the next word following the previous two\n      const nextWord = this.nextWordFor(words);\n\n      if (!nextWord.done) {\n        // If the sentence isn't finished, push the result to the end of the sentence\n        sentence.push(nextWord.word);\n      } else {\n        // Otherwise, we're finished!\n        done = true;\n      }\n      if (sentence.length >= maxWords) {\n        done = true;\n      }\n    }\n\n    // Return the completed sentence.\n    return sentence.join(' ');\n  }\n\n  /**\n   * nextWordFor takes two words and returns the next word (chosen at random, with\n   * more-commonly appearing words being more likely to be chosen)\n   *\n   * @param {string[]} words\n   */\n  nextWordFor(words) {\n    const [a, b] = words;\n    const key = `${a} ${b}`;\n    if (this.freq.hasOwnProperty(key)) {\n      return {\n        word: sample(this.freq[key]),\n        done: false,\n      };\n    } else {\n      return {\n        done: true,\n      };\n    }\n  }\n\n  addText(text) {\n    const sentences = String(text)\n      // strip newlines\n      .replace(/\\n/g, ' ')\n      .replace(/<[^>]*>?/gm, '')\n      .replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '')\n      // split into sentences\n      .split(seps)\n      // filter out empty strings\n      .filter((e) => e !== '');\n    for (let sentence of sentences) {\n      this.addSentence(sentence);\n    }\n  }\n\n  sampleFrequencies() {\n    const key = sample(Object.keys(this.freq));\n\n    return `${key}: ${this.freq[key]}`;\n  }\n\n  getLongestChain() {\n    const values = Object.values(this.freq).sort((a, b) => b.length - a.length);\n    const key = Object.keys(this.freq).find((k) => this.freq[k] === values[0]);\n    let v = {};\n\n    v[key] = values[0];\n\n    return v;\n  }\n\n  getFrequencies() {\n    return this.freq;\n  }\n\n  getBeginnings() {\n    return this.beginnings;\n  }\n}\n\nexport default MarkovChain;\n","import React, {\n  useState,\n  useEffect,\n  ReactElement,\n  DragEvent,\n  ChangeEvent,\n  FocusEvent,\n} from 'react';\n\nimport { Button, Modal, Form, Image, Grid } from 'semantic-ui-react';\n\nimport questConfig from '../assets/config/quests.json';\nimport quests from '../assets/img/quests';\nimport skills from '../assets/img/skills';\nimport proficiencies from '../assets/img/proficiencies';\nimport Markov from '../utils/markov';\n\ntype AddTaskProps = {\n  open: boolean;\n  dimmer?: string;\n  toggleTaskModal: () => void;\n  addTask: (\n    inputTaskName: string,\n    inputPriority: number,\n    inputSkill: string[],\n    inputProficiency: string[]\n  ) => void;\n};\n\nconst AddTask = ({ open, dimmer, toggleTaskModal, addTask }: AddTaskProps): ReactElement => {\n  const [inputTaskName, setInputTaskName] = useState<string>('');\n  const [inputPriority, setInputPriority] = useState<number>(1);\n  const [inputSkill, setInputSkill] = useState<string[]>([]);\n  const [inputProficiency, setInputProficiency] = useState<string[]>([]);\n\n  const cleanStates = () => {\n    const taskName = new Markov(2, questConfig).generateSentence(7);\n    setInputTaskName(taskName);\n    setInputPriority(1);\n    setInputSkill([]);\n    setInputProficiency([]);\n  };\n\n  const toggleInputSkill = (skill: string): void => {\n    let newSkills: string[] = [];\n    if (inputSkill.indexOf(skill) !== -1) {\n      newSkills = inputSkill.filter((element) => element !== skill);\n    } else {\n      newSkills = [...inputSkill, skill];\n    }\n    setInputSkill(newSkills);\n  };\n  const toggleInputProficiency = (skill: string) => {\n    let newSkills = [];\n    if (inputProficiency.indexOf(skill) !== -1) {\n      newSkills = inputProficiency.filter((element) => element !== skill);\n    } else {\n      newSkills = [...inputProficiency, skill];\n    }\n    setInputProficiency(newSkills);\n  };\n\n  useEffect(() => {\n    if (open) {\n      cleanStates();\n    }\n  }, [open]);\n\n  const preventDragHandler = (e: DragEvent) => {\n    e.preventDefault();\n  };\n  return (\n    <Modal\n      dimmer={dimmer}\n      open={open}\n      onClose={() => {\n        toggleTaskModal();\n      }}\n      size=\"mini\"\n      basic\n      centered\n      style={{ marginTop: 0, marginBottom: 0 }}\n    >\n      <Modal.Content>\n        <h2 className=\"centerText\">Add quest</h2>\n        <Form>\n          <Grid centered columns={1} container>\n            <Grid.Row centered columns={3}>\n              <Form.Field\n                control=\"input\"\n                placeholder=\"Quest name\"\n                value={inputTaskName}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  setInputTaskName(event.target.value)\n                }\n                onFocus={(event: FocusEvent<HTMLInputElement>) => event.target.select()}\n              />\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest Type\n              <br />\n              {quests &&\n                Object.keys(quests).map((key) => (\n                  <Grid.Column key={key}>\n                    <Image\n                      key={key}\n                      src={quests[key]}\n                      size=\"tiny\"\n                      onClick={() => setInputPriority(Object.keys(quests).indexOf(key) + 1)}\n                      className=\"taskSkillImage\"\n                      style={{\n                        opacity: inputPriority === Object.keys(quests).indexOf(key) + 1 ? 1 : 0.5,\n                      }}\n                      onDragStart={preventDragHandler}\n                    />\n                  </Grid.Column>\n                ))}\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest rewards\n              <br />\n              {skills &&\n                Object.keys(skills).map((key) => (\n                  <Grid.Column key={key}>\n                    <Image\n                      key={key}\n                      src={skills[key]}\n                      size=\"tiny\"\n                      onClick={() => toggleInputSkill(key)}\n                      className=\"taskSkillImage\"\n                      style={{\n                        opacity: inputSkill.indexOf(key) !== -1 ? 1 : 0.5,\n                      }}\n                      onDragStart={preventDragHandler}\n                    />\n                  </Grid.Column>\n                ))}\n            </Grid.Row>\n            <Grid.Row centered columns={4}>\n              Quest proficiencies\n              <br />\n              {proficiencies &&\n                Object.keys(proficiencies).map((image) => (\n                  <Grid.Column centered key={image}>\n                    <Image\n                      key={image}\n                      src={proficiencies[image]}\n                      size=\"tiny\"\n                      onClick={() => toggleInputProficiency(image)}\n                      className=\"taskSkillImage taskSkillProficiency\"\n                      style={{\n                        opacity: inputProficiency.indexOf(image) !== -1 ? 1 : 0.5,\n                      }}\n                      onDragStart={preventDragHandler}\n                    />\n                  </Grid.Column>\n                ))}\n            </Grid.Row>\n          </Grid>\n          <Modal.Actions>\n            <Grid.Row centered columns={3}>\n              <Grid.Column\n                centered\n                style={{ textAlign: 'center', marginLeft: '2vw', marginRight: '2vw' }}\n              >\n                <Button\n                  negative\n                  onClick={() => {\n                    toggleTaskModal();\n                  }}\n                  style={{ float: 'left' }}\n                >\n                  Close\n                </Button>\n                <Button\n                  positive\n                  onClick={() =>\n                    addTask(inputTaskName, inputPriority, inputSkill, inputProficiency)\n                  }\n                  style={{ float: 'right' }}\n                >\n                  Add quest\n                </Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Modal.Actions>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default AddTask;\n","import React from 'react';\n\nimport { Icon } from 'semantic-ui-react';\n\ntype FooterProps = { toggleTaskModal: () => void };\n\nconst Footer = ({ toggleTaskModal }: FooterProps): React.ReactElement => (\n  <Icon name=\"add circle\" onClick={toggleTaskModal} className=\"addTaskIcon\" size=\"huge\" />\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport { Menu, Segment } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\ntype NavbarProps = { activeItem?: string };\n\nconst Navbar = ({ activeItem }: NavbarProps): React.ReactElement => (\n  <Segment inverted>\n    <Menu inverted pointing secondary>\n      <Link to=\"/\">\n        <Menu.Item name=\"profile\" active={activeItem === 'profile'} />\n      </Link>\n      <Link to=\"/quests\">\n        <Menu.Item name=\"quests\" active={activeItem === 'quests'} />\n      </Link>\n      <Link to=\"/proficiency\">\n        <Menu.Item name=\"proficiency\" active={activeItem === 'proficiency'} />\n      </Link>\n      <Link to=\"/budget\">\n        <Menu.Item name=\"budget\" active={activeItem === 'budget'} />\n      </Link>\n    </Menu>\n  </Segment>\n);\n\nexport default Navbar;\n","import React, { useState, Reducer, ReactElement } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Profile from '../components/profile';\nimport Proficiency from '../components/proficiency';\nimport Tasks from '../components/tasks';\nimport AddTask from './AddTask';\nimport Footer from '../components/footer';\nimport Navbar from '../components/navbar';\nimport { TaskType, ProfileType } from '../utils/types';\n\nconst getFromLocalStorage = (key: string, defaultValue: unknown) => {\n  const localStorageValue = localStorage.getItem(key);\n  return localStorageValue ? JSON.parse(localStorageValue) : defaultValue;\n};\n\nconst saveToLocalStorage = (key: string, data: unknown) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nconst modalReducer: Reducer<\n  { open: boolean; dimmer?: string },\n  { type: string; dimmer?: string }\n> = (_state, action) => {\n  switch (action.type) {\n    case 'OPEN_MODAL':\n      return { open: true, dimmer: action.dimmer };\n    case 'CLOSE_MODAL':\n      return { open: false };\n    default:\n      throw new Error();\n  }\n};\n\nconst getTasks = () => getFromLocalStorage('tasks', []);\nconst getProfile = () =>\n  getFromLocalStorage('profile', {\n    name: 'Niekto',\n    avatar: null,\n    level: 1,\n    levelPure: 1,\n    xp: 0,\n    budget: 0,\n    stats: {\n      strength: 0,\n      speed: 0,\n      intelligence: 0,\n    },\n    proficiencies: {},\n  });\n\nconst App = (): ReactElement => {\n  const [profile, setProfile] = useState<ProfileType>(getProfile());\n  const [tasks, setTasks] = useState<TaskType[]>(getTasks());\n  const [modalState, setModalState] = React.useReducer(modalReducer, {\n    open: false,\n    dimmer: undefined,\n  });\n\n  const saveTasks = (newTasks: TaskType[]) => {\n    saveToLocalStorage('tasks', newTasks);\n    setTasks(newTasks);\n  };\n\n  const saveProfile = (newProfile: ProfileType) => {\n    saveToLocalStorage('profile', newProfile);\n    setProfile(newProfile);\n  };\n\n  const toggleTaskModal = () => {\n    setModalState({\n      type: modalState.open ? 'CLOSE_MODAL' : 'OPEN_MODAL',\n      dimmer: 'blurring',\n    });\n  };\n\n  const addTask = (\n    inputTaskName: string,\n    inputPriority: number,\n    inputSkill: string[],\n    inputProficiency: string[]\n  ) => {\n    const newTasks = [...tasks];\n    const id = uuidv4();\n    newTasks.push({\n      id,\n      name: inputTaskName,\n      category: 'global',\n      status: 'idle',\n      startedAt: Date.now(),\n      completedAt: undefined,\n      priority: inputPriority,\n      rewards: inputSkill,\n      proficiencies: inputProficiency,\n    });\n    saveTasks(newTasks);\n    toggleTaskModal();\n  };\n\n  const deleteTask = (id: string) => {\n    const newTasks = tasks.filter((element) => element.id !== id);\n    saveTasks(newTasks);\n  };\n\n  const completeTask = (id: string) => {\n    const newTasks = [...tasks];\n    const currentTaskIndex = newTasks.findIndex((obj) => obj.id === id);\n    newTasks[currentTaskIndex].completedAt = Date.now();\n    newTasks[currentTaskIndex].status = 'completed';\n    saveTasks(newTasks);\n\n    const newProfile = { ...profile };\n    newProfile.xp += Math.floor(Math.random() * 10) * newTasks[currentTaskIndex].priority;\n    newProfile.levelPure += newProfile.xp / (120 * newProfile.level);\n    newProfile.level = Math.floor(newProfile.levelPure);\n    newTasks[currentTaskIndex].rewards.forEach((value) => {\n      newProfile.stats[value] += 1;\n    });\n    newTasks[currentTaskIndex].proficiencies.forEach((value) => {\n      if (!(value in newProfile.proficiencies)) {\n        newProfile.proficiencies[value] = 0;\n      }\n      newProfile.proficiencies[value] += 1;\n    });\n    saveProfile(newProfile);\n  };\n\n  const changeStatusTask = (id: string, status: string) => {\n    const newTasks = [...tasks];\n    const index = newTasks.findIndex((obj) => obj.id === id);\n    newTasks[index].status = status;\n    saveTasks(newTasks);\n  };\n\n  return (\n    <HashRouter basename=\"/\">\n      <header>\n        <Navbar />\n      </header>\n      <Switch>\n        <Route path=\"/quests\">\n          <AddTask\n            open={modalState.open}\n            dimmer={modalState.dimmer}\n            toggleTaskModal={toggleTaskModal}\n            addTask={addTask}\n          />\n          <Tasks\n            taskList={tasks}\n            deleteTask={deleteTask}\n            completeTask={completeTask}\n            changeStatusTask={changeStatusTask}\n          />\n          {!modalState.open && <Footer toggleTaskModal={toggleTaskModal} />}\n        </Route>\n        <Route path=\"/proficiency\">\n          <Proficiency profile={profile} />\n        </Route>\n        <Route path=\"/\">\n          <Profile profile={profile} />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './assets/styles/index.css';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}