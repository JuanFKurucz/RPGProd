{"version":3,"sources":["components/profile/Player.jsx","components/profile/Level.jsx","components/profile/Budget.jsx","components/profile/Stats.jsx","components/profile/index.jsx","assets/img/proficiencies/index.js","assets/img/proficiencies/art.png","assets/img/proficiencies/astronomy.png","assets/img/proficiencies/cad.png","assets/img/proficiencies/cooking.png","assets/img/proficiencies/crafting.png","assets/img/proficiencies/reading.png","assets/img/proficiencies/study.png","assets/img/proficiencies/working_out.png","components/proficiency/index.jsx","assets/img/weight-lifting-up.png","assets/img/speedometer.png","assets/img/artificial-intelligence.png","components/tasks/Task.jsx","components/tasks/Column.jsx","components/tasks/index.jsx","assets/img/two-coins.png","assets/img/treasure-map.png","assets/img/evil-minion.png","utils/markov.js","containers/AddTask.jsx","components/footer/index.jsx","components/navbar/index.jsx","containers/App.jsx","index.jsx"],"names":["Player","profile","className","name","src","avatar","alt","Level","xp","level","Progress","percent","Math","round","levelPure","progress","color","Budget","budget","Stats","stats","images","Object","keys","map","stat","Image","size","replace","floor","Profile","Grid","container","Row","centered","columns","Column","computer","mobile","proficiencies","art","astronomy","cad","cooking","crafting","reading","study","working_out","Proficiency","rewards","strength","speed","intelligence","Task","data","category","deleteTask","completeTask","changeStatusTask","status","textAlign","verticalAlign","x","inline","style","width","Icon","onClick","id","defaultProps","taskList","prioritiesNames","1","2","3","Tasks","tasks","filter","y","priorities","Set","priority","sort","a","b","margin","padding","seps","sample","arr","random","length","MarkovChain","order","text","t","this","beginnings","freq","addText","toLowerCase","string","words","split","s","buf","push","slice","word","key","hasOwnProperty","splice","maxWords","sentence","done","nextWord","nextWordFor","join","sentences","String","e","addSentence","values","v","find","k","AddTask","open","dimmer","toggleTaskModal","addTask","useState","inputTaskName","setInputTaskName","inputPriority","setInputPriority","inputSkill","setInputSkill","inputProficiency","setInputProficiency","toggleInputSkill","skill","newSkills","indexOf","element","useEffect","taskName","Markov","quests","generateSentence","cleanStates","preventDragHandler","preventDefault","Modal","onClose","basic","marginTop","marginBottom","Content","Form","Field","control","placeholder","value","onChange","event","target","onFocus","select","sideQuest","opacity","onDragStart","quest","bossFight","image","toggleInputProficiency","Actions","marginLeft","marginRight","Button","negative","float","positive","Footer","Navbar","activeItem","Segment","inverted","Menu","pointing","secondary","to","Item","active","getFromLocalStorage","defaultValue","storage","JSON","parse","localStorage","getItem","saveToLocalStorage","setItem","stringify","modalReducer","state","action","type","Error","App","setProfile","setTasks","React","useReducer","undefined","modalState","setModalState","saveTasks","newTasks","basename","path","uuidv4","startedAt","Date","now","completedAt","index","findIndex","obj","newProfile","forEach","prof","saveProfile","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcd7b6f0.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Player = ({profile}) => (\n  <div className=\"centerText\">\n    <span>{profile.name || \"Player Name\"}</span>\n    <br />\n    <img\n      src={\n        profile.avatar ||\n        \"https://cdn1.iconfinder.com/data/icons/zeshio-s-fantasy-avatars/200/Fantasy_avatar_people-07-512.png\"\n      }\n      className=\"playerPicture\"\n      alt=\"Player avatar\"\n    />\n  </div>\n);\n\nPlayer.propTypes = {\n  profile: PropTypes.shape({\n    name: PropTypes.string,\n    avatar: PropTypes.string,\n  }).isRequired\n}\n\nexport default Player;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Progress } from \"semantic-ui-react\";\n\nconst Level = ({profile}) => (\n  <div className=\"centerText profileComponent\">\n    <div className=\"text-center\">\n      XP: \n      {' '}\n      {profile.xp}\n    </div>\n    <div className=\"text-center\">\n      Level:\n      {' '}\n      {profile.level}\n    </div>\n    <Progress\n      percent={Math.round((profile.levelPure % 1) * 100)}\n      progress\n      color=\"brown\"\n    />\n  </div>\n);\n\nLevel.propTypes = {\n  profile: PropTypes.shape({\n    xp: PropTypes.number,\n    level: PropTypes.number,\n    levelPure: PropTypes.number,\n  }).isRequired\n}\n\nexport default Level;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Budget = ({profile}) => (\n  <div className=\"centerText profileComponent\">\n    Budget: $\n    {profile.budget || 0}\n  </div>\n);\n\nBudget.propTypes = {\n  profile: PropTypes.shape({\n    budget: PropTypes.number,\n  }).isRequired\n}\n\nexport default Budget;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Progress, Image } from \"semantic-ui-react\";\n\nconst Stats = ({name,stats,images}) => (\n  <div className=\"centerText profileComponent\">\n    {name}\n    {Object.keys(stats).map((stat) => (\n      <>\n        <div className=\"text-center categoryName\">\n          {images && (\n            <Image\n              key={stat}\n              src={images[stat]}\n              size=\"tiny\"\n              className=\"taskSkillImage\"\n            />\n          )}\n          {stat.replace(/_/gi, \" \")}\n          {\" \"}\n          - Level:\n          {\" \"}\n          {Math.floor(stats[stat] / 5)}\n        </div>\n        <Progress\n          percent={(stats[stat] % 5) * 20}\n          progress\n          color=\"brown\"\n        />\n      </>\n    ))}\n  </div>\n);\n\nStats.propTypes = {\n  name: PropTypes.string.isRequired,\n  stats: PropTypes.objectOf(PropTypes.number).isRequired,\n  images: PropTypes.objectOf(PropTypes.string).isRequired\n}\n\nexport default Stats;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Grid } from \"semantic-ui-react\";\n\nimport Player from \"./Player\";\nimport Level from \"./Level\";\nimport Budget from \"./Budget\";\nimport Stats from \"./Stats\";\n\nconst Profile = ({profile}) => (\n  <section>\n    <Grid container className=\"profile\">\n      <Grid.Row centered columns={3} container={false}>\n        <Grid.Column computer={5} mobile={16}>\n          <Player profile={profile} />\n        </Grid.Column>\n        <Grid.Column computer={5} mobile={16}>\n          <Level profile={profile} />\n          <Budget profile={profile} />\n        </Grid.Column>\n        <Grid.Column computer={5} mobile={16}>\n          <Stats name=\"Stats\" stats={profile.stats} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  </section>\n);\n\nProfile.propTypes = {\n  profile: PropTypes.shape({\n    stats:PropTypes.objectOf(PropTypes.number),\n  }).isRequired\n}\n\nexport default Profile;\n","import art from './art.png';\nimport astronomy from './astronomy.png';\nimport cad from './cad.png';\nimport cooking from './cooking.png';\nimport crafting from './crafting.png';\nimport reading from './reading.png';\nimport study from './study.png';\nimport workingOut from './working_out.png';\n\nconst proficiencies = {\n  art,\n  astronomy,\n  cad,\n  cooking,\n  crafting,\n  reading,\n  study,\n  working_out: workingOut,\n};\n\nexport default proficiencies;\n","export default __webpack_public_path__ + \"static/media/art.e031e195.png\";","export default __webpack_public_path__ + \"static/media/astronomy.9de823b6.png\";","export default __webpack_public_path__ + \"static/media/cad.25f45ea4.png\";","export default __webpack_public_path__ + \"static/media/cooking.a9d4d0f5.png\";","export default __webpack_public_path__ + \"static/media/crafting.c79b1266.png\";","export default __webpack_public_path__ + \"static/media/reading.0ccffc52.png\";","export default __webpack_public_path__ + \"static/media/study.7a781a29.png\";","export default __webpack_public_path__ + \"static/media/working_out.e37e6624.png\";","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Grid } from \"semantic-ui-react\";\n\nimport proficiencies from \"../../assets/img/proficiencies\";\nimport Stats from \"../profile/Stats\";\n\nconst Proficiency = ({profile}) => (\n  <section>\n    <Grid container className=\"profile\">\n      <Grid.Row centered columns={1} container={false}>\n        {profile.proficiencies && (\n          <Grid.Column computer={16} mobile={16}>\n            <Stats\n              name=\"Proficiencies\"\n              stats={profile.proficiencies}\n              images={proficiencies}\n            />\n          </Grid.Column>\n        )}\n      </Grid.Row>\n    </Grid>\n  </section>\n);\n\n\nProficiency.propTypes = {\n  profile: PropTypes.shape({\n    proficiencies: PropTypes.objectOf(PropTypes.number),\n  }).isRequired\n}\n\n\nexport default Proficiency;\n","export default __webpack_public_path__ + \"static/media/weight-lifting-up.9247417f.png\";","export default __webpack_public_path__ + \"static/media/speedometer.34169805.png\";","export default __webpack_public_path__ + \"static/media/artificial-intelligence.470883d7.png\";","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Icon, Image, Grid } from \"semantic-ui-react\";\n\nimport strength from \"../../assets/img/weight-lifting-up.png\";\nimport speed from \"../../assets/img/speedometer.png\";\nimport intelligence from \"../../assets/img/artificial-intelligence.png\";\nimport proficiencies from \"../../assets/img/proficiencies\";\n\nconst rewards = {\n  strength,\n  speed,\n  intelligence,\n};\n\nconst Task = ({data,category,deleteTask,completeTask,changeStatusTask}) => (\n  <div className={`centerText taskComponent task${data.status}`}>\n    <Grid centered container={false}>\n      <Grid.Row\n        centered\n        columns={3}\n        container={false}\n        textAlign=\"center\"\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column\n          centered\n          computer={3}\n          mobile={3}\n          className=\"gridColumnTask\"\n        >\n          {data.rewards &&\n            data.rewards.map((x) => (\n              <Image\n                verticalAlign=\"middle\"\n                src={rewards[x]}\n                size=\"mini\"\n                className=\"invert\"\n                inline\n                style={{ width: \"2em\" }}\n              />\n            ))}\n          {data.proficiencies &&\n            data.proficiencies.map((x) => (\n              <Image\n                verticalAlign=\"middle\"\n                src={proficiencies[x]}\n                size=\"mini\"\n                inline\n                style={{ width: \"2em\" }}\n              />\n            ))}\n        </Grid.Column>\n        <Grid.Column computer={7} mobile={7} className=\"gridColumnTask\">\n          {category && (\n            <span className=\"categoryName\">{category}</span>\n          )}\n          {data.name}\n        </Grid.Column>\n        <Grid.Column width={5} className=\"gridColumnTask\">\n          <Grid centered container>\n            <Grid.Row centered columns={3}>\n              {data.status !== \"completed\" && (\n                <Grid.Column>\n                  {data.status !== \"idle\" && (\n                    <Icon\n                      name=\"pause\"\n                      onClick={() => {\n                        changeStatusTask(data.id, \"idle\");\n                      }}\n                    />\n                  )}\n                  {data.status === \"idle\" && (\n                    <Icon\n                      name=\"play\"\n                      onClick={() => {\n                        changeStatusTask(data.id, \"inprogress\");\n                      }}\n                    />\n                  )}\n                </Grid.Column>\n              )}\n              {data.status !== \"completed\" && (\n                <Grid.Column>\n                  <Icon\n                    name=\"check\"\n                    onClick={() => {\n                      completeTask(data.id);\n                    }}\n                  />\n                </Grid.Column>\n              )}\n              <Grid.Column>\n                <Icon\n                  name=\"trash\"\n                  onClick={() => {\n                    deleteTask(data.id);\n                  }}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  </div>\n);\n\nTask.propTypes = {\n  category: PropTypes.string,\n  data: PropTypes.shape({\n    id:PropTypes.string,\n    name:PropTypes.string,\n    status:PropTypes.string,\n    rewards:PropTypes.arrayOf(PropTypes.string),\n    proficiencies:PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  completeTask: PropTypes.func.isRequired,\n  changeStatusTask: PropTypes.func.isRequired,\n}\n\nTask.defaultProps = {\n  category:\"\"\n}\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Task from './Task';\n\nconst Column = ({name,taskList,deleteTask,completeTask,changeStatusTask}) => (\n  <div className=\"taskColumn\">\n    <div className=\"categoryName\">{name}</div>\n    {taskList.map((x) => (\n      <Task\n        key={x.id}\n        data={x}\n        deleteTask={deleteTask}\n        completeTask={completeTask}\n        changeStatusTask={changeStatusTask}\n      />\n    ))}\n  </div>\n);\n\nColumn.propTypes = {\n  name: PropTypes.string.isRequired,\n  taskList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  completeTask: PropTypes.func.isRequired,\n  changeStatusTask: PropTypes.func.isRequired,\n}\n\nexport default Column;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Grid } from \"semantic-ui-react\";\n\nimport Column from \"./Column\";\n\nconst prioritiesNames = {\n  1: \"Side quest\",\n  2: \"Quest\",\n  3: \"Boss fight\",\n};\n\nconst Tasks = ({taskList,deleteTask,completeTask,changeStatusTask}) => {\n  const tasks = taskList.filter((y) => y.status !== \"completed\");\n  const priorities = [...new Set(tasks.map((x) => x.priority))];\n  priorities.sort((a, b) => b - a);\n  return (\n    <section>\n      <div className=\"tasks\">\n        <Grid style={{margin:0,padding: 0}}>\n          <Grid.Row\n            centered\n            columns={3}\n            container={false}\n            textAlign=\"center\"\n            verticalAlign=\"top\"\n          >\n            {priorities.map((x) => (\n              <Grid.Column computer={5} mobile={16} style={{margin:0,padding: 0}}>\n                <Column\n                  key={x}\n                  name={prioritiesNames[x]}\n                  taskList={tasks.filter((y) => y.priority === x)}\n                  deleteTask={deleteTask}\n                  completeTask={completeTask}\n                  changeStatusTask={changeStatusTask}\n                />\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n        </Grid>\n      </div>\n    </section>\n  );\n};\n\nTasks.propTypes = {\n  taskList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  completeTask: PropTypes.func.isRequired,\n  changeStatusTask: PropTypes.func.isRequired,\n}\n\nexport default Tasks;\n","export default __webpack_public_path__ + \"static/media/two-coins.7996ead5.png\";","export default __webpack_public_path__ + \"static/media/treasure-map.f8e3cf39.png\";","export default __webpack_public_path__ + \"static/media/evil-minion.b7e8bae2.png\";","/* eslint-disable */\n\n// define some sentence separators\nconst seps = /[.!?;:]/;\n\n/**\n * sample is a function that picks a random element from an array\n * @param {any[]} arr\n */\nfunction sample(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nclass MarkovChain {\n  /**\n   * @param {number} order\n   */\n  constructor(order, text) {\n    /**\n     * \"order\" is the \"memory\" of the Markov chain. For example, with\n     * an order of 2, the likelihood of a word appearing is based on the\n     * previous 2 words\n     * @type {number}\n     */\n    this.order = order;\n\n    /**\n     * The array storing all the beginnings of sentences in our text sample.\n     * One of these will be chosen at random to start the generated sentence.\n     * @type {string[][]}\n     */\n    this.beginnings = [];\n\n    /**\n     * A dictionary of frequencies for different word combinations. Each key\n     * is a sentence fragment of `order` length, and the value is an array of\n     * words that come after that sentence fragment.\n     */\n    this.freq = {};\n\n    for (let t in text) {\n      this.addText(text[t].toLowerCase());\n    }\n  }\n\n  /**\n   * Adds a sentence to the chain. This adds the beginning of the sentence to\n   * this.beginnings and adds frequencies/probabilities to this.freq\n   * @param {string} string\n   */\n  addSentence(string) {\n    // split the passed sentence into words and filter out excess spaces/empty slots\n    const words = string\n      .split(' ')\n      .filter((s) => s !== \"'\")\n      .filter((s) => s !== ' ')\n      .filter((s) => s !== '');\n\n    /**\n     * Initialise a buffer. This buffer will be moved along the sentence kind\n     * of like a filmstrip, looking at only `order + 1` words at a time:\n     *\n     * This is [a sentence with] the buffer illustrated\n     *\n     */\n    const buf = [];\n\n    // If the sentence is shorter than the order then we must return\n    if (words.length <= this.order) {\n      return;\n    }\n\n    // Add the beginning of this sentence to the chain's beginnings\n    this.beginnings.push(words.slice(0, this.order + 1));\n\n    for (let word of words) {\n      buf.push(word);\n      if (buf.length === this.order + 1) {\n        const key = `${buf[0]} ${buf[buf.length - 2]}`;\n        if (this.freq.hasOwnProperty(key)) {\n          this.freq[key].push(buf[buf.length - 1]);\n        } else {\n          this.freq[key] = [buf[buf.length - 1]];\n        }\n\n        /**\n         * Remove the first word from the beginning of the array to move\n         * the buffer forward\n         */\n        buf.splice(0, 1);\n      }\n    }\n  }\n\n  /**\n   * Runs through the Markov chain to generate a sentence\n   */\n  generateSentence(maxWords = 100) {\n    // Sample the beginnings and make a copy to begin our sentence.\n    const sentence = sample(this.beginnings).slice();\n\n    // Choose a random fragment of puncutation to end the sentence with.\n\n    // Set a flag for us to check when we've exhausted our sentence options.\n    let done = false;\n\n    while (!done) {\n      // Pick the two most recent words\n      const words = [sentence[sentence.length - 2], sentence[sentence.length - 1]];\n\n      // Grab the next word following the previous two\n      const nextWord = this.nextWordFor(words);\n\n      if (!nextWord.done) {\n        // If the sentence isn't finished, push the result to the end of the sentence\n        sentence.push(nextWord.word);\n      } else {\n        // Otherwise, we're finished!\n        done = true;\n      }\n      if (sentence.length >= maxWords) {\n        done = true;\n      }\n    }\n\n    // Return the completed sentence.\n    return sentence.join(' ');\n  }\n\n  /**\n   * nextWordFor takes two words and returns the next word (chosen at random, with\n   * more-commonly appearing words being more likely to be chosen)\n   *\n   * @param {string[]} words\n   */\n  nextWordFor(words) {\n    const [a, b] = words;\n    const key = `${a} ${b}`;\n    if (this.freq.hasOwnProperty(key)) {\n      return {\n        word: sample(this.freq[key]),\n        done: false,\n      };\n    } else {\n      return {\n        done: true,\n      };\n    }\n  }\n\n  addText(text) {\n    const sentences = String(text)\n      // strip newlines\n      .replace(/\\n/g, ' ')\n      .replace(/<[^>]*>?/gm, '')\n      .replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '')\n      // split into sentences\n      .split(seps)\n      // filter out empty strings\n      .filter((e) => e !== '');\n    for (let sentence of sentences) {\n      this.addSentence(sentence);\n    }\n  }\n\n  sampleFrequencies() {\n    const key = sample(Object.keys(this.freq));\n\n    return `${key}: ${this.freq[key]}`;\n  }\n\n  getLongestChain() {\n    const values = Object.values(this.freq).sort((a, b) => b.length - a.length);\n    const key = Object.keys(this.freq).find((k) => this.freq[k] === values[0]);\n    let v = {};\n\n    v[key] = values[0];\n\n    return v;\n  }\n\n  getFrequencies() {\n    return this.freq;\n  }\n\n  getBeginnings() {\n    return this.beginnings;\n  }\n}\n\nexport default MarkovChain;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, Form, Image, Grid } from \"semantic-ui-react\";\n\nimport quests from \"../assets/config/quests.json\";\nimport sideQuest from \"../assets/img/two-coins.png\";\nimport quest from \"../assets/img/treasure-map.png\";\nimport bossFight from \"../assets/img/evil-minion.png\";\nimport strength from \"../assets/img/weight-lifting-up.png\";\nimport speed from \"../assets/img/speedometer.png\";\nimport intelligence from \"../assets/img/artificial-intelligence.png\";\nimport proficiencies from \"../assets/img/proficiencies\";\nimport Markov from \"../utils/markov\";\n\n\nconst AddTask = ({open,dimmer,toggleTaskModal,addTask}) => {\n  const [inputTaskName, setInputTaskName] = useState(\"\");\n  const [inputPriority, setInputPriority] = useState(1);\n  const [inputSkill, setInputSkill] = useState([]);\n  const [inputProficiency, setInputProficiency] = useState([]);\n\n  const cleanStates = () => {\n    const taskName = new Markov(2, quests).generateSentence(7);\n    setInputTaskName(taskName);\n    setInputPriority(1);\n    setInputSkill([]);\n    setInputProficiency([]);\n  };\n\n  const toggleInputSkill = (skill) => {\n    let newSkills = [];\n    if (inputSkill.indexOf(skill) !== -1) {\n      newSkills = inputSkill.filter((element) => element !== skill);\n    } else {\n      newSkills = [...inputSkill, skill];\n    }\n    setInputSkill(newSkills);\n  };\n  const toggleInputProficiency = (skill) => {\n    let newSkills = [];\n    if (inputProficiency.indexOf(skill) !== -1) {\n      newSkills = inputProficiency.filter((element) => element !== skill);\n    } else {\n      newSkills = [...inputProficiency, skill];\n    }\n    setInputProficiency(newSkills);\n  };\n\n  useEffect(() => {\n    if (open) {\n      cleanStates();\n    }\n  }, [open]);\n\n  const preventDragHandler = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Modal\n      dimmer={dimmer}\n      open={open}\n      onClose={() => {\n        toggleTaskModal();\n      }}\n      size=\"mini\"\n      basic\n      centered\n      style={{marginTop:0,marginBottom:0}}\n    >\n      <Modal.Content>\n        <h2 className=\"centerText\">Add quest</h2>\n        <Form>\n          <Grid centered columns={1} container>\n            <Grid.Row centered columns={3}>\n              <Form.Field\n                control=\"input\"\n                placeholder=\"Quest name\"\n                value={inputTaskName}\n                onChange={(event) => setInputTaskName(event.target.value)}\n                onFocus={(event) => event.target.select()}\n              />\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest Type\n              <br />\n              <Grid.Column>\n                <Image\n                  src={sideQuest}\n                  size=\"tiny\"\n                  onClick={() => setInputPriority(1)}\n                  className=\"taskSkillImage\"\n                  style={{ opacity: inputPriority === 1 ? 1 : 0.5 }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={quest}\n                  size=\"tiny\"\n                  onClick={() => setInputPriority(2)}\n                  className=\"taskSkillImage\"\n                  style={{ opacity: inputPriority === 2 ? 1 : 0.5 }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={bossFight}\n                  size=\"tiny\"\n                  onClick={() => setInputPriority(3)}\n                  className=\"taskSkillImage\"\n                  style={{ opacity: inputPriority === 3 ? 1 : 0.5 }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n              Quest rewards\n              <br />\n              <Grid.Column>\n                <Image\n                  src={strength}\n                  size=\"tiny\"\n                  onClick={() => toggleInputSkill(\"strength\")}\n                  className=\"taskSkillImage\"\n                  style={{\n                    opacity: inputSkill.indexOf(\"strength\") !== -1 ? 1 : 0.5,\n                  }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={speed}\n                  size=\"tiny\"\n                  onClick={() => toggleInputSkill(\"speed\")}\n                  className=\"taskSkillImage\"\n                  style={{\n                    opacity: inputSkill.indexOf(\"speed\") !== -1 ? 1 : 0.5,\n                  }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Image\n                  src={intelligence}\n                  size=\"tiny\"\n                  onClick={() => toggleInputSkill(\"intelligence\")}\n                  className=\"taskSkillImage\"\n                  style={{\n                    opacity:\n                      inputSkill.indexOf(\"intelligence\") !== -1 ? 1 : 0.5,\n                  }}\n                  onDragStart={preventDragHandler}\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered columns={4}>\n              Quest proficiencies\n              <br />\n              {proficiencies &&\n                Object.keys(proficiencies).map((image) => (\n                  <Grid.Column centered key={image}>\n                    <Image\n                      key={image}\n                      src={proficiencies[image]}\n                      size=\"tiny\"\n                      onClick={() => toggleInputProficiency(image)}\n                      className=\"taskSkillImage taskSkillProficiency\"\n                      style={{\n                        opacity:\n                          inputProficiency.indexOf(image) !== -1 ? 1 : 0.5,\n                      }}\n                      onDragStart={preventDragHandler}\n                    />\n                  </Grid.Column>\n                  )\n                )}\n            </Grid.Row>\n          </Grid>\n          <Modal.Actions>\n            <Grid.Row centered columns={3}>\n              <Grid.Column centered style={{textAlign:\"center\",marginLeft:\"2vw\",marginRight:\"2vw\"}}>\n                <Button\n                  negative\n                  onClick={() => {\n                    toggleTaskModal();\n                  }}\n                  style={{float:\"left\"}}\n                >\n                  Close\n                </Button>\n                <Button\n                  positive\n                  onClick={() =>\n                    addTask(\n                      inputTaskName,\n                      inputPriority,\n                      inputSkill,\n                      inputProficiency\n                    )}\n                  style={{float:\"right\"}}\n                >\n                  Add quest\n                </Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Modal.Actions>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nAddTask.propTypes = {\n  open: PropTypes.bool.isRequired,\n  dimmer: PropTypes.bool.isRequired,\n  toggleTaskModal: PropTypes.func.isRequired,\n  addTask: PropTypes.func.isRequired,\n}\n\n\nexport default AddTask;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Icon } from \"semantic-ui-react\";\n\nconst Footer = ({toggleTaskModal}) => (\n  <Icon\n    name=\"add circle\"\n    onClick={toggleTaskModal}\n    className=\"addTaskIcon\"\n    size=\"huge\"\n  />\n)\n\nFooter.propTypes = {\n  toggleTaskModal: PropTypes.func.isRequired\n}\n\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Menu, Segment } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = ({activeItem}) => (\n  <Segment inverted>\n    <Menu inverted pointing secondary>\n      <Link to=\"/\">\n        <Menu.Item name=\"profile\" active={activeItem === \"profile\"} />\n      </Link>\n      <Link to=\"/quests\">\n        <Menu.Item name=\"quests\" active={activeItem === \"quests\"} />\n      </Link>\n      <Link to=\"/proficiency\">\n        <Menu.Item\n          name=\"proficiency\"\n          active={activeItem === \"proficiency\"}\n        />\n      </Link>\n      <Link to=\"/budget\">\n        <Menu.Item name=\"budget\" active={activeItem === \"budget\"} />\n      </Link>\n    </Menu>\n  </Segment>\n);\n\nNavbar.propTypes = {\n  activeItem: PropTypes.string\n}\n\nNavbar.defaultProps = {\n  activeItem: 'profile'\n};\n\nexport default Navbar;\n","import React, { useState } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Profile from '../components/profile';\nimport Proficiency from '../components/proficiency';\nimport Tasks from '../components/tasks';\nimport AddTask from './AddTask';\nimport Footer from '../components/footer';\nimport Navbar from '../components/navbar';\n\nconst getFromLocalStorage = (key, defaultValue) => {\n  let storage = JSON.parse(localStorage.getItem(key));\n  if (!storage) {\n    storage = defaultValue;\n  }\n  return storage;\n};\n\nconst saveToLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nconst modalReducer = (state, action) => {\n  switch (action.type) {\n    case 'OPEN_MODAL':\n      return { open: true, dimmer: action.dimmer };\n    case 'CLOSE_MODAL':\n      return { open: false };\n    default:\n      throw new Error();\n  }\n}\n\nconst getTasks = () => getFromLocalStorage('tasks', []);\nconst getProfile = () =>\n  getFromLocalStorage('profile', {\n    name: 'Niekto',\n    avatar: null,\n    level: 1,\n    levelPure: 1,\n    xp: 0,\n    budget: 0,\n    stats: {\n      strength: 0,\n      speed: 0,\n      intelligence: 0,\n    },\n    proficiencies: {},\n  });\n\nconst App = () => {\n  const [profile, setProfile] = useState(getProfile());\n  const [tasks, setTasks] = useState(getTasks());\n  const [modalState, setModalState] = React.useReducer(modalReducer, {\n    open: false,\n    dimmer: undefined,\n  });\n\n  const saveTasks = (newTasks) => {\n    saveToLocalStorage('tasks', newTasks);\n    setTasks(newTasks);\n  };\n\n  const saveProfile = (newProfile) => {\n    saveToLocalStorage('profile', newProfile);\n    setProfile(newProfile);\n  };\n\n  const toggleTaskModal = () => {\n    setModalState({\n      type: modalState.open ? 'CLOSE_MODAL' : 'OPEN_MODAL',\n      dimmer: 'blurring',\n    });\n  };\n\n  const addTask = (inputTaskName, inputPriority, inputSkill, inputProficiency) => {\n    const newTasks = [...tasks];\n    const id = uuidv4();\n    newTasks.push({\n      id,\n      name: inputTaskName,\n      category: 'global',\n      status: 'idle',\n      startedAt: Date.now(),\n      completedAt: null,\n      priority: inputPriority,\n      rewards: inputSkill,\n      proficiencies: inputProficiency,\n    });\n    saveTasks(newTasks);\n    toggleTaskModal();\n  };\n\n  const deleteTask = (id) => {\n    const newTasks = tasks.filter((element) => element.id !== id);\n    saveTasks(newTasks);\n  };\n\n  const completeTask = (id) => {\n    const newTasks = [...tasks];\n    const index = newTasks.findIndex((obj) => obj.id === id);\n    newTasks[index].completedAt = Date.now();\n    newTasks[index].status = 'completed';\n    saveTasks(newTasks);\n\n    const newProfile = { ...profile };\n    newProfile.xp += Math.floor(Math.random() * 10) * newTasks[index].priority;\n    newProfile.levelPure += newProfile.xp / (120 * newProfile.level);\n    newProfile.level = Math.floor(newProfile.levelPure);\n    Object.keys(newTasks[index].rewards).forEach((skill) => {\n      newProfile.stats[newTasks[index].rewards[skill]] += 1;\n    })\n    if (!('proficiencies' in newProfile)) {\n      newProfile.proficiencies = {};\n    }\n    Object.keys(newTasks[index].proficiencies).forEach((prof) => {\n      if (!(newTasks[index].proficiencies[prof] in newProfile.proficiencies)) {\n          newProfile.proficiencies[newTasks[index].proficiencies[prof]] = 0;\n      }\n      newProfile.proficiencies[newTasks[index].proficiencies[prof]] += 1;\n    })\n    saveProfile(newProfile);\n  };\n\n  const changeStatusTask = (id, status) => {\n    const newTasks = [...tasks];\n    const index = newTasks.findIndex((obj) => obj.id === id);\n    newTasks[index].status = status;\n    saveTasks(newTasks);\n  };\n\n  return (\n    <HashRouter basename=\"/\">\n      <header>\n        <Navbar />\n      </header>\n      <Switch>\n        <Route path=\"/quests\">\n          <AddTask\n            open={modalState.open}\n            dimmer={modalState.dimmer}\n            toggleTaskModal={toggleTaskModal}\n            addTask={addTask}\n          />\n          <Tasks\n            taskList={tasks}\n            deleteTask={deleteTask}\n            completeTask={completeTask}\n            changeStatusTask={changeStatusTask}\n          />\n          {!modalState.open && <Footer toggleTaskModal={toggleTaskModal} />}\n        </Route>\n        <Route path=\"/proficiency\">\n          <Proficiency profile={profile} />\n        </Route>\n        <Route path=\"/\">\n          <Profile profile={profile} />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./assets/styles/index.css\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}